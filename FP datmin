{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KEBAIKAN METODE KLASIFIKASI MULTICLASS MENGGUNAKAN HOLD-OUT METHOD DAN CROSS VALIDATION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#SUMBER DATA\n",
    "Sumber data pada penelitian ini merupakan data sekunder. Data sekunder yang digunakan adalah Seeds Data Set UCI Machine Learning sebanyak 210 observasi. Data diambil pada hari Selasa 4 Desember 2018.\n",
    "\n",
    "#VARIABEL PENELITIAN\n",
    "Variabel independen yang digunakan pada penelitian ini sebanyak 7 variabel, yaitu: \n",
    "1. Area\n",
    "2. Perimeter\n",
    "3. Compactness\n",
    "4. Length of kernel\n",
    "5. Width of kernel\n",
    "6. Asymmetry Coefficient\n",
    "7. Length of kernel groove\n",
    "\n",
    "\n",
    "Variabel dependen : Class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importing libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split,cross_val_score,StratifiedKFold, GridSearchCV\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, f1_score\n",
    "from sklearn.naive_bayes import GaussianNB"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fetching the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area (A)</th>\n",
       "      <th>perimeter (P)</th>\n",
       "      <th>Compactness C=4*pi*A/P^2</th>\n",
       "      <th>length of kernel</th>\n",
       "      <th>width of kernel</th>\n",
       "      <th>asymmetry coefficient</th>\n",
       "      <th>length of kernel groove</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15.26</td>\n",
       "      <td>14.84</td>\n",
       "      <td>0.8710</td>\n",
       "      <td>5.763</td>\n",
       "      <td>3.312</td>\n",
       "      <td>2.221</td>\n",
       "      <td>5.220</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.88</td>\n",
       "      <td>14.57</td>\n",
       "      <td>0.8811</td>\n",
       "      <td>5.554</td>\n",
       "      <td>3.333</td>\n",
       "      <td>1.018</td>\n",
       "      <td>4.956</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>14.29</td>\n",
       "      <td>14.09</td>\n",
       "      <td>0.9050</td>\n",
       "      <td>5.291</td>\n",
       "      <td>3.337</td>\n",
       "      <td>2.699</td>\n",
       "      <td>4.825</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13.84</td>\n",
       "      <td>13.94</td>\n",
       "      <td>0.8955</td>\n",
       "      <td>5.324</td>\n",
       "      <td>3.379</td>\n",
       "      <td>2.259</td>\n",
       "      <td>4.805</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16.14</td>\n",
       "      <td>14.99</td>\n",
       "      <td>0.9034</td>\n",
       "      <td>5.658</td>\n",
       "      <td>3.562</td>\n",
       "      <td>1.355</td>\n",
       "      <td>5.175</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   area (A)  perimeter (P)  Compactness C=4*pi*A/P^2  length of kernel  \\\n",
       "0     15.26          14.84                    0.8710             5.763   \n",
       "1     14.88          14.57                    0.8811             5.554   \n",
       "2     14.29          14.09                    0.9050             5.291   \n",
       "3     13.84          13.94                    0.8955             5.324   \n",
       "4     16.14          14.99                    0.9034             5.658   \n",
       "\n",
       "   width of kernel  asymmetry coefficient  length of kernel groove  class  \n",
       "0            3.312                  2.221                    5.220      1  \n",
       "1            3.333                  1.018                    4.956      1  \n",
       "2            3.337                  2.699                    4.825      1  \n",
       "3            3.379                  2.259                    4.805      1  \n",
       "4            3.562                  1.355                    5.175      1  "
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_excel(\"C:/Users/USER/Documents/semester 7/data mining/final project/seeds datasets.xlsx\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PREPROCESSING DATA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extracting Features and Output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to split the dataset into independent and dependent variables. \n",
    "In this dataset, the first seven columns are independent variables, \n",
    "whereas the last column, 'class', is the dependent variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data.drop(['class','Compactness C=4*pi*A/P^2'],axis=1)\n",
    "y = data['class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area (A)</th>\n",
       "      <th>perimeter (P)</th>\n",
       "      <th>length of kernel</th>\n",
       "      <th>width of kernel</th>\n",
       "      <th>asymmetry coefficient</th>\n",
       "      <th>length of kernel groove</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15.26</td>\n",
       "      <td>14.84</td>\n",
       "      <td>5.763</td>\n",
       "      <td>3.312</td>\n",
       "      <td>2.221</td>\n",
       "      <td>5.220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.88</td>\n",
       "      <td>14.57</td>\n",
       "      <td>5.554</td>\n",
       "      <td>3.333</td>\n",
       "      <td>1.018</td>\n",
       "      <td>4.956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>14.29</td>\n",
       "      <td>14.09</td>\n",
       "      <td>5.291</td>\n",
       "      <td>3.337</td>\n",
       "      <td>2.699</td>\n",
       "      <td>4.825</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13.84</td>\n",
       "      <td>13.94</td>\n",
       "      <td>5.324</td>\n",
       "      <td>3.379</td>\n",
       "      <td>2.259</td>\n",
       "      <td>4.805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16.14</td>\n",
       "      <td>14.99</td>\n",
       "      <td>5.658</td>\n",
       "      <td>3.562</td>\n",
       "      <td>1.355</td>\n",
       "      <td>5.175</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   area (A)  perimeter (P)  length of kernel  width of kernel  \\\n",
       "0     15.26          14.84             5.763            3.312   \n",
       "1     14.88          14.57             5.554            3.333   \n",
       "2     14.29          14.09             5.291            3.337   \n",
       "3     13.84          13.94             5.324            3.379   \n",
       "4     16.14          14.99             5.658            3.562   \n",
       "\n",
       "   asymmetry coefficient  length of kernel groove  \n",
       "0                  2.221                    5.220  \n",
       "1                  1.018                    4.956  \n",
       "2                  2.699                    4.825  \n",
       "3                  2.259                    4.805  \n",
       "4                  1.355                    5.175  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Detection Missing Value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "area (A)                    False\n",
       "perimeter (P)               False\n",
       "Compactness C=4*pi*A/P^2    False\n",
       "length of kernel            False\n",
       "width of kernel             False\n",
       "asymmetry coefficient       False\n",
       "length of kernel groove     False\n",
       "class                       False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().any()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "there are no outlier in seeds data set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Scaling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "for feature scalling in this dataset use a normalized "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [],
   "source": [
    "norm_var = X.columns\n",
    "for norm in norm_var:\n",
    "    if norm in X.columns.values:\n",
    "        X[norm] = preprocessing.normalize(np.array(X[norm_var]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area (A)</th>\n",
       "      <th>perimeter (P)</th>\n",
       "      <th>Compactness C=4*pi*A/P^2</th>\n",
       "      <th>length of kernel</th>\n",
       "      <th>width of kernel</th>\n",
       "      <th>asymmetry coefficient</th>\n",
       "      <th>length of kernel groove</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>12.19</td>\n",
       "      <td>13.20</td>\n",
       "      <td>0.8783</td>\n",
       "      <td>5.137</td>\n",
       "      <td>2.981</td>\n",
       "      <td>3.631</td>\n",
       "      <td>4.870</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>11.23</td>\n",
       "      <td>12.88</td>\n",
       "      <td>0.8511</td>\n",
       "      <td>5.140</td>\n",
       "      <td>2.795</td>\n",
       "      <td>4.325</td>\n",
       "      <td>5.003</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>13.20</td>\n",
       "      <td>13.66</td>\n",
       "      <td>0.8883</td>\n",
       "      <td>5.236</td>\n",
       "      <td>3.232</td>\n",
       "      <td>8.315</td>\n",
       "      <td>5.056</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208</th>\n",
       "      <td>11.84</td>\n",
       "      <td>13.21</td>\n",
       "      <td>0.8521</td>\n",
       "      <td>5.175</td>\n",
       "      <td>2.836</td>\n",
       "      <td>3.598</td>\n",
       "      <td>5.044</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>209</th>\n",
       "      <td>12.30</td>\n",
       "      <td>13.34</td>\n",
       "      <td>0.8684</td>\n",
       "      <td>5.243</td>\n",
       "      <td>2.974</td>\n",
       "      <td>5.637</td>\n",
       "      <td>5.063</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     area (A)  perimeter (P)  Compactness C=4*pi*A/P^2  length of kernel  \\\n",
       "205     12.19          13.20                    0.8783             5.137   \n",
       "206     11.23          12.88                    0.8511             5.140   \n",
       "207     13.20          13.66                    0.8883             5.236   \n",
       "208     11.84          13.21                    0.8521             5.175   \n",
       "209     12.30          13.34                    0.8684             5.243   \n",
       "\n",
       "     width of kernel  asymmetry coefficient  length of kernel groove  class  \n",
       "205            2.981                  3.631                    4.870      3  \n",
       "206            2.795                  4.325                    5.003      3  \n",
       "207            3.232                  8.315                    5.056      3  \n",
       "208            2.836                  3.598                    5.044      3  \n",
       "209            2.974                  5.637                    5.063      3  "
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deteksi Outlier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAyIAAAImCAYAAACvqz78AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvIxREBQAAIABJREFUeJzs3Xm4ZFV1sPF30c3QIDJroFFabVEcURAkoqI4oFHRaByiEXCKX7QhJsYhMYpGYiZjsE2CmqgQB0SMigZBiMFZsVFAEIcLNEIz2DSj0KLA+v7Yu+jTlzvUnXbV7fv+nqeeW3WmWrtOnbPvqrP3PpGZSJIkSVJLmw06AEmSJEkLj4mIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERBolIp4WEZ+fwvL/HRGHzGVMkqThFREXRsRBg46jXxGxS0T8NCK26mPZf46I17aISwtPeB8RaWMRsQp4fWZ+tzMtgIuBX2fmQ0Ytvx/w75m5T9tIJUmbsog4HHhVZh44y9t9L7A2M/+uvj4LeCxwO/Br4OvA6zLzqojYFTgbeEBm/mY245C8IqJ5LSIWz/L2HgNs101CqicA9wLuX5e5S2aeDdwzIvadzVgkScNttuug2TZWfBGxJXAY8PFRs16fmfcA9gS2B94HkJlXAT8BnjO30WohMhHR0ImIt0TExRFxc0T8OCKe15l3eER8KyLeFxHXAUfX6a+IiIsi4vqIOD0i9uisc2xEXB4RN0XEORHx+Ane/hnA18aYfhjwBeDU+ny0s4Dfm3JhJUnNRcTqiHhrrWOuj4iPdpspRcSzIuLciLghIr4dEY8Yte6bI+J84JaIWFynPaXOPzoiPhMRH6/12I8iYs/6fr+s9dHTOtvbLiL+MyKuiog1EfHuiFgUEXsBxwEHRMSvIuKGuvyWEfFPEfGLiLgmIo6LiCV13kERcUWN72rgo2MUf3/ghsy8YqzPJjOvAz4LPKwz+Sys4zQHTEQ0jC4GHg9sB7wT+Hi9NNyzP3AJ5QrFMRHxXOAvgd8HdgG+AXyqs/z3gb2BHYFPAp+ZoF3sw4GfdidExNbAC4BP1MeLI2KLUetdBDxyasWUJA3QS4GnAw+gXAV4G0BEPBr4CPDHwE7AB4FT6pWEnpdQ/jHfPjNvH2Pbzwb+C9gB+CFwOuV/rqXAu+o2e46nNIlaDjwKeBqlOdZFwGuB72TmPTJz+7r839d4967rLAXe3tne71Dquz2A14wR293qua6I2Bl4fo27xzpOc8JEREMnMz+TmVdm5p2Z+Wng58B+nUWuzMyVmXl7Zq6nVBbvycyLaoXwt8DevasimfnxzFxXl38vsCXwoHHefnvg5lHTfh+4DfgK8CVgMXf/Zejmuq4kaX74QGZeXq8AHENJLgBeDXwwM7+XmXdk5vGUOuCxnXXfX9ddP862v5GZp9c66TOUH8n+LjN/C5wILIuI7SPi3pQr8X+ambdk5i8pTaJePNZGa3/FVwNvyMzrMvNmSp3XXf5O4B2Zeds48Y1VzwG8v151OQ+4CvizzjzrOM2JoW7bqIUpIl5OOQEuq5PuAezcWeTyUavsARxbO9/dtRnKr0SXRcSfA68CdgMSuOeo7XVdD2w7atphwEm1Qrk9Iv67TvtcZ5ltgRsmLZwkaVh065LLKHUElDrlsIhY0Zm/RWf+6HXHck3n+Xrg2sy8o/MaSt22G7A5cFXJMYDyI/F4298F2Bo4p7N8AIs6y6zNzF9PENtY9RzAkZn5H+OsYx2nOWEioqFSr2J8GDiYcjn6jog4l3Ki7Rk91NvlwDGZ+Ykxtvd44M11exdm5p0Rcf2o7XWdT7nk3Vt/d+DJwH4R8fw6eWtgq4jYOTOvrdP2ovyKJEmaH+7TeX5f4Mr6vFenHDPBurM15OjllKstO4/TxGv0+1xLSWQemplrphnb+cAbphSldZzmiE2zNGy2oZxE1wJExBFs3GFuLMcBb42Ih9Z1touIP6jztqW0vV0LLI6It1OuiIznVOCJndd/BPyM0pRr7/rYE7iCDZfxqet8ebLCSZKGxusiYveI2JHSz/DTdfqHgddGxP5RbBMRvxcRY11FmJE6ItVXgPdGxD0jYrOIeEBE9Oqha4Dde/0SM/POGt/7IuJeABGxNCKePoW3PRvYPiKWTmEd6zjNCRMRDZXM/DHwXuA7lBPww4FvTbLO5yid906MiJuACyhtbqF0EPwyJZm4jDI++riX1DPzB8CNEbF/nXQY8G+ZeXX3QUl+DoO7hvy9pQ7jK0maHz5JSQIuqY93A2TmKko/jA9QmjGNAIfPYRwvpzT9+nF9v5OB3gAtXwUuBK6OiN4V+DfXmL5b67wzGb/f493Ue4F8DHhZP8vXwWIeAvR9o1+pX97QUBqlDqv4J5n53D6X/yzwn5l56txGJkmaDRGxmjIy1ZmDjmUQIqI3wuSjJuhw31v2vcDFmflvTYLTgmIiIkmSFpSFnohIw8KmWZIkSZKa84qIJEmSpOa8IiJJkiSpORMRSZIkSc1N6YaGO++8cy5btmyOQpEk9eOcc865NjN3GXQcw8h6SpIGr996akqJyLJly1i1atX0o5IkzVhEXDboGIaV9ZQkDV6/9ZRNsyRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktSciYgkSZKk5kxEJEmSJDVnIiJJkiSpORMRSZIkSc0tHnQAGqyVK1cyMjIy6DAWhDVr1gCwdOnSAUfS1vLly1mxYsWgw5CkCQ1rfbjQ6g7rjIXFRGSBGxkZ4dwLLuKOrXccdCibvEW33gjA1bctnMNu0a3XDToESerLsNaHC6nusM5YeDb9b7UmdcfWO7L+wc8cdBibvCU/ORVgQX3WvTJL0nwwjPXhQqo7rDMWHvuISJIkSWrORESSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktSciYgkSZKk5kxEJEmSJDVnIiJJkiSpORMRSZIkSc2ZiEiSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmTEQkSZIkNWciIkmSJKk5ExFJkiRJzZmISJIkSWrORESSJElSc80SkZUrV7Jy5cpWbydJQ8lz4fBy30hS23Ph4ibvAoyMjLR6K0kaWp4Lh5f7RpLangttmiVJkiSpORMRSZIkSc2ZiEiSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmTEQkSZIkNWciIkmSJKk5ExFJkiRJzZmISJIkSWrORESSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktSciYgkSZKk5kxEJEmSJDVnIiJJkiSpORMRSZIkSc2ZiEiSJElqbnGrN1qzZg3r16/nqKOOavWW6sPIyAib/SYHHYY2UZv9+iZGRm72uO8YGRlhyZIlgw5DY7CeWtisDwfPOmM4tKynJr0iEhGviYhVEbFq7dq1LWKSJKlv1lOSND9NekUkMz8EfAhg3333nfZPBUuXLgXg2GOPne4mNAeOOuoozrnkmkGHoU3UnVvdk+X3v7fHfYe/9M0+6ynNBuvDwbPOGA4t6yn7iEiSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmTEQkSZIkNWciIkmSJKk5ExFJkiRJzZmISJIkSWrORESSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktSciYgkSZKk5kxEJEmSJDVnIiJJkiSpORMRSZIkSc2ZiEiSJElqzkREkiRJUnOLW73R8uXLW72VJA0tz4XDy30jSW3Phc0SkRUrVrR6K0kaWp4Lh5f7RpLangttmiVJkiSpORMRSZIkSc2ZiEiSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmTEQkSZIkNWciIkmSJKk5ExFJkiRJzZmISJIkSWrORESSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktSciYgkSZKk5kxEJEmSJDVnIiJJkiSpORMRSZIkSc0tHnQAGrxFt17Hkp+cOugwNnmLbl0HsKA+60W3Xgfce9BhSFJfhrE+XEh1h3XGwmMissAtX7580CEsGGvW3A7A0qUL6SR7b79jkuaFYT1XLay6wzpjoTERWeBWrFgx6BAkSRo460OpPfuISJIkSWrORESSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktRcZGb/C0esBS7rc/GdgWunE9SQ2RTKYRmGg2UYHvO9HHtk5i6DDmIYTbGeGs+wfz+Mb2aMb2aMb2YWSnx91VNTSkSmIiJWZea+c7LxhjaFcliG4WAZhsemUg7NjWH/fhjfzBjfzBjfzBjfxmyaJUmSJKk5ExFJkiRJzc1lIvKhOdx2S5tCOSzDcLAMw2NTKYfmxrB/P4xvZoxvZoxvZoyvY876iEiSJEnSeGyaJUmSJKk5ExFJkiRJzfWdiETEIRHx04gYiYi3jDH/8IhYGxHn1serOvPu6Ew/pTP9fhHxvYj4eUR8OiK2mHmRZr8MEfGkzrRzI+LXEfHcOu9jEXFpZ97egyxDXeaFEfHjiLgwIj7ZmX5Y/ax/HhGHdabvExE/qtt8f0TEMJYhIvaOiO/UaedHxIs6y8+n/TAUx8NMyjGfjomIeF8nlp9FxA2deUNxTGhu9fEd2bIecyP1GFxWp+/X+e6cFxHPq9O3ioiz67QLI+KdwxRfZ71FEfHDiPjSsMUXEavrMXZuRKwawvi2j4iTI+InEXFRRBwwLPFFxINGnX9viog/HZb46rw31GPjgoj4VERsNWTxHVVju3Amn91M4uvMv29E/Coi3tjvNgcc20ci4pcRccF049pIZk76ABYBFwP3B7YAzgMeMmqZw4EPjLP+r8aZfhLw4vr8OOD/9RPPdB4zLUNnmR2B64Ct6+uPAS+Yq7inUYYHAj8Edqiv79WJ+5L6d4f6vLfM2cABQABfBp4xpGXYE3hgfb4bcBWw/XzaD/X5wI+H2ShHZ5mhPiZGLb8C+Egn7oEfEz4G/x0B/gQ4rj5/MfDp+nxrYHF9vivwS2Bx/V7co07fHPge8Nhhia+z3p8BnwS+NEyfX329Gth5GPdvfX088Kr6fAtqXTMs8Y3a/tWUm8cNRXzAUuBSYEmddxJw+BDF9zDggt584Ezq/xYt4+vM/yzwGeCN/W5zULHVaU8AHg1cMNPjNzP7viKyHzCSmZdk5m+AE4FD+1x3TBERwJOBk+uk44HnzmSbk5itMrwA+HJm3jqr0fWnnzK8GvjXzLweIDN/Wac/HTgjM6+r884ADomIXYF7ZuZ3snzDTmDw+2HMMmTmzzLz5/X5lZSTyiDuLj2T/TCmARwPMHvlGPZjouslwKfq82E5JjS3+vmOHEo55qAcgwdHRGTmrZl5e52+FZAAWfyqTt+8PqY78susxwcQEbsDvwf8xzTjmtP4ZtGsxxcR96T8s/WfAJn5m8y8gemZ68/vYODizLxsyOJbDCyJiMWUf/ivHKL49gK+25n/NWCjq4kt4gOI0pLgEuDCKW5zULGRmV+n/Pg4K/pNRJYCl3deX1Gnjfb8KE1mTo6I+3SmbxURqyLiu7VgADsBN3S+JONtc7bMtAw9L2bDPzI9x9R13hcRW85SvGPppwx7AntGxLfq533IJOsurc8n2uZsmkkZ7hIR+1Ey/Is7k+fDfoDhOB5glvYFw39MABARewD3A746ybqtjwnNrX6+I3ctU4/BGynHJBGxf0RcCPwIeG3vGI3S7Olcyg8iZ2Tm94YpPuBfgDcBd04zrrmOL4GvRMQ5EfGaIYvv/sBa4KNRmrb9R0RsM0TxdY11/h1ofJm5Bvgn4BeUlgs3ZuZXhiU+ytWQJ0TEThGxNfBMYKz/9+Y0vvqdejMwumln3/XaAGKbdf0mImO1jx6dmX8RWJaZj6Bc5jq+M+++WW4X/4fAv0TEA/rc5myaaRmov5Q+HDi9M/mtwIOBx1CaeLx5tgIeQz9lWExpTnMQ5dff/4iI7SdYdxj3w3hlKBso++G/gCMys1fJzpf9AMNxPNDne/azL4b9mOh5MXByZt4xybqD2BeaO/3sz3GXyczvZeZDKd/nt0Zt656Zd2Tm3sDuwH4R8bBhiS8ingX8MjPPmWZMcxpfnf+4zHw08AzgdRHxhCGKbzGl6cm/Z+ajgFuA6bbTn6vPjyj9CJ9DaTozXXPx/duB8kv7/SjNqLeJiJcNS3yZeRHw95Sr4KdRmiyNTvBaxPdO4H2dq6tT2eagYpt1/SYiV7Bxtrg7oy6zZea6zLytvvwwsE9n3pX17yXAWcCjgGuB7etluzG3OctmVIbqhcDnMvO3nXWuqpfpbwM+SrkUNlcmLUNd5guZ+dvMvBT4KeUfyfHWvaI+n2ibs2kmZehdMv8f4G2Z+d3eCvNoPwzL8dCLcdrlqObDMdEz+pfDYTkmNLf6/Z7fB6Aeg9sxqulB/eflFkr78u70GyjH8VhXCwcV3+OA50TEakpzjCdHxMeHKL7uefCXwOeY/nliLuK7Ariic5XrZEpiMizx9TwD+EFmXjPN2OYqvqcAl2bm2lo3/Dfwu0MUH5n5n5n56Mx8Ql325wOIb3/gH+px+qfAX0bE6/vc5qBim33ZX4eXxZR2YvdjQ4eXh45aZtfO8+dR2t9B6QS6ZX2+M2VnP6S+/gwbd879k37imc5jJmXoTPsu8KSx1qFklf8C/N2Ay3AIcHzn876ccolyR0rnsR3q41Jgx7rc94HHsqFj7jP7iGU18JTGZdgC+BYlWx/dYW9a+wF4NyUJuHqMeQdRKqPZLMO0jofpft5ztS/m0zFRl3tQ/QyjM21Wjwkfw/no83v+OjbusHlSfX4/NnR23YNSie9M6ZvWGyhjCfAN4FnDEt+odQ9iZp3V5+Lz2wbYtk7fBvg2cMgQxHcnsE99/Q3gQfX50cCpwDcniOMgpl9f3C0+yo84NwJnj/H5HQ58k5JkHjHg4yOB5aPi25/Sr2Bryjn0eGDFEOzfu44PNgyCc1/gJ9SBSlrGN2qZo9nQWb2vem0QsXWmLWOWOqtPpUDPBH5GaZP/V3Xau4Dn1OfvqV+884D/Ax5cp/8upW3eefXvKzvbvD9ldJoRyj9hW85GoWa7DJ0PfQ2w2ahtfrWW6wLg49SRVAZYhgD+GfhxjevFnXVfUT/rETonL2DfGv/FwAfo/LM2QRyrmeY/xlMsw2+Ad9fpLwN+SznxnVsfe093P1B+BVjPGCNB1fkHMUbFMpP9MN3jYSaf9xx+n+bFMVFfH80YCdFsHhM+hvfRx/d8q3rMjdRj8P51+h9R6oRzgR8Az63TH0EZTe78+j15+zDFN2rbBzGDRGSOPr/7U86B59X5fzVM8dV5ewOr6j7+PGV0oW925iewfNTnPN36YnR8L6T8Uv2qcT6/wynJ2zpguwEfH0mpH0Z/fu+k/IN/AaUp9bT/v5uj/fuNGvd5wMGD+PxGbeNoNh6Z6m7bHKLYPkXp+/Pb+j195XTjy8xSuUpTVS/XvSozz2z5PlHGuL4U2Dzv3mlvqts+EDgxM3cfZ/5BwMfHmz+F91k8C7GupsHnLUm6u4g4nHIOPrC+TsqQryP19UHMQn1Rt/UySsfqA/uJZQbvMxt100afgzRV3lldMxYRm0XEWyLi4ohYFxEnRcSOdd6yiMgoN477RURcGxF/1Vl3SUQcHxHXR7lp1Jsi4oo6778ol02/GOWGOm/qvO1Lx9reGLFtFxEnRLlR5WUR8bYa71MoHdV2q9v+WB/lPDLKjf12r6+fFeVGSTdExLcj4hGdZVdHxJsj4nzglohYXKe9McpoUjdGuYlQt+PhuNuTJE1dRBwREV/svB6JiJM6ry+PetPVWlctr893iohTotws8GzgAZ11vl6fnlfrj+7Ndf88ys3eroqIIyaIa7e6/etqTK+u019JGXL5gLrtSUctioh/jIhvRsR29fUran16fUScHmXEwN6yGRGvi4ifU/tF1GmvjXJj1+sj4l8jNtzEdaLtSTM200t6Phbmg05TIUpHpu9SOkJtCXwQ+FSdt4xy6fbDlLbUjwRuA/aq8/+OMob3DnX98+lc3mZUk6TJtjdGnCcAXwC2rev+jHoZkQkupY+eD/w15dLuLvX1oynDdu5PuWnQYTXWLTtxn0tp/rWkM+1syigiOwIXUX716nd7s940y4cPHz425QelGdgNlB9edwUuA9Z05l1PbV5Kp7kVpf/FSZQ+LA+jNEOdrGnW7ZRmL5tTmsTcyjh9D2q992+UpjF7U4YLPrjOO5yJ+6McTukjslmtC09nww1ln0tpZrMXpY/A24Bvj4r7jFoHLelM+xKwPeXHv7XUPjt9bm/5eLH68DHZwysimg1/TGl7eEWWkZKOBl4QG0aAAnhnZq7PzF674EfW6S8E/jYzr8/MK4D39/me423vLhGxCHgR8NbMvDkzVwPvpbQb7VdExD9Tbn73pMxcW6e/GvhglqEB78jM4ykJ0WM7674/My/PzPWjpl2ZmddRhoveewrbkyRNQZbRCW+mnGufSPmnfU1EPLi+/kZuGAYeuKvueD6l788tmXkBo4bzH8dvgXdlGWXwVOBXlIEyNhLlHmUHAm/OzF9n5rmUqyBTqZs2p7TV3xF4dm64oewfA+/JzIuyNLv6W2DvUVcx3pPlRq7duunvMvOGzPwFpY/s3lPYnjRtiydfRJrUHsDnIqJ7Mr8DuHfn9dWd57cC96jPd2PjG+50n09kvO117UwZKaJ7x9nLmNqNgbYHXgO8KDNv7EzfAzgsIlZ0pm1BKU/PWGUZHXdv+X62J0mauq9Rrlgsr89voCQhB9TXo+1C+f+oew7v587l63LjPhfj1U27Addl5s2jtr9vH+/Rs5zyA9x+We6a3bMHcGxEvLczLSj1Xq8M/dRNvbj72Z40bV4R0Wy4HHhGZm7feWyV5e6qk7mKje/ZMPrupjMZTeFayi9U3V9u7ku5xN6v64FnUe6w+7jO9MuBY0aVeevM7N6nYiqx97M9SdLU9RKRx9fnX6MkIk9k7ERkLaWZVbc+uu8sxnMlsGNEbDtq+1Opmy4CjgC+HBHdqy6XA388qi5Zkpnf7iwz1bppsu1J02YiotlwHHBM71JtROwSEYf2ue5JlLud7hARS4HRN8y5htKOd8qy3EH7pBrbtjW+P6MMKTuV7ZwFvJRy1Wf/OvnDwGsjYv8otomI3xtVsUzFbG9PklR8DXgSpU/EFZShWw+h3Nvph6MXrnXHfwNHR8TWEfEQSr+9rnHrptrx++XjBZOZl1OG331PlDuRPwJ4JfCJMbb1lxNs51PAXwJnRkSvM/1xlDr1oXX97SLiDyLiX2LD3es/ERE/jYjzIuJbnfc6MSIeyMbG3N54MUlTZSKi2XAscArwlYi4mdJxff+JV7nLuyjjUF8KnEm5g+1tnfnvAd5WR5J64zRiW0G5m+ollM59nwQ+MtaCEfHciHj7qMn3iohPZeYZlF+fTokymtc9Kf06PkC5ajJC6UA4LZm5aja3J0kqMvNnlP4a36ivb6LUCd+qScdYXk9pnnQ18DHKDQa7jgaOr3XTC3sTowyJe1xmnjBJWC+hDKByJeXO8u+o9cxo4yYitSzHU+rRr0bEssz8HPAPwIkRcRPlPh6HAo/NzK93Vn1pZj6Sjfu+/DvQHZ2Sur2/H7W9Z0xSNqlv3kdEQyUi/h/lpnlPnOJ6iyaoUPrdxrcpN/m5tr7ei3JFZUdgz8y8pU7fA/hwZj5tJu8nSRouUe5VdRrwPeBRlJEWX56Zt0bEPpQbvN6D0vT38My8KiLOolzheBzlR7ltgV9l5j/VeT8E9qH0PXk58Fbg4cCnM/Nt9X1fBhxJ6Rv4PcoNFI8B/oJyg9gLM/OlYy2XmXdExK9qbE8H/jwzv9kp02uA3TLz6Pr6LMoN6lbVTvv/nZkPiYjNKDe+e2DO8P4iUr+8IqKBiohdI+JxUe7t8SDgzym/DnWX+XxEnBMRF9YTam/6ryLiXRHxPcqY6/tExNfqsqdHxK51uVdHxPfrZejPRsTWY8SxJ3BbLwmp/pByR9ivAM/pTczMy4CdIuJ3ZvGjkCQNhwcBH8rMRwA3AX8SEZsDK4EXZOY+lCvrx3TW2T4zn5iZ77375vhNZj6B0szpC8DrKEMCHx7lfiV7UUZ4fFxm7k0Z7OWlmfkWYH1m7l2TkDGXq++xDXBBZu7fTUKqxwHnjFPWZ1MSHeroYSOMMQqlNFccNUuDtgXlviP3o4xkciJlbPWuV2TmdRGxBPh+RHw2M9ex4cT79lpJfA04NDPXRrnB1DHAKyi/9nwYICLeTWmLu3LUezyOcp+QrhcBT6VUSq+nDJXY84O6zmenX3RJ0hC6PDN7fSc+TrkCcRoleTgjyr3+FlEGW+n59ATbO6X+7V3ZuAogIi6hdIg/kHLF5Pt120so95Ua7eAJlruD8eujXSkd8Ls+ERHrKfeo6o7W+EvKqF7jJS7SrDIR0UDVqwsPm2SxIyPiefX5fYAHAuvY+MT7IMavJB5WE5DtKZfUTx/jPTY6UUfEY4C1mXlZlDu9fyQidsjM6+sivZO1JGnTMrrNelKGrL0wMw8YZ51bJther9/jnWzcB/JOyv9hARyfmW+dJK6Jlvv1BM2T11NunNj10to3cbSt6vJSEzbN0lCLiIOApwAH1I51P2TDCbV74u1VEnvXx8M7fTg+Brw+Mx8OvJO7n5Dh7ifqlwAPjojVlDaz96Tc4KrHk7UkbZruGxG9hOMllIFOfgrs0pseEZsl2jtZAAAgAElEQVT3RpKaBf9LuQnwveq2d4wNNwz8bb3iP9lyE7mIct+RfuwJXNh/6NLMTKmz+s4775zLli2bu2gkSZM655xzrs3MXQYdxzCynpKkweu3nppS06xly5axatVYV/IkSa1EhHc0Hof1lCQNXr/1lE2zJEmSJDVnIiJJkiSpORMRSZIkSc2ZiEiSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmTEQkSZIkNWciIkmSJKk5ExFJkiRJzZmISJIkSWpu8aADkCaycuVKRkZGBh3GpNasWQPA0qVLBxzJ9C1fvpwVK1YMOgxJGmrzpV7q16ZQf4F12HxlIqKhNjIywrkXXMQdW+846FAmtOjWGwG4+rb5eUgtuvW6QYcgSfPCfKmX+jXf6y+wDpvP5u+3TgvGHVvvyPoHP3PQYUxoyU9OBRj6OMfTi1+SNLn5UC/1a77XX2AdNp/ZR0SSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktSciYgkSZKk5kxEJEmSJDVnIiJJkiSpORMRSZIkSc2ZiEiSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmTEQkSZIkNWciIkmSJKk5ExFJkiRJzZmISJIkSWrORESSJElSc0OXiKxcuZKVK1cOOgxJmhOe44aX+0aS2p4LFzd5lykYGRkZdAiSNGc8xw0v940ktT0XDt0VEUmSJEmbPhMRSZIkSc2ZiEiSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmTEQkSZIkNWciIkmSJKk5ExFJkiRJzZmISJIkSWrORESSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktSciYgkSZKk5kxEJEmSJDXXLBFZt24dRx55JOvWrWv1lpIkSZKGVLNE5Pjjj+dHP/oRJ5xwQqu3lCRJkjSkmiQi69at47TTTiMzOe2007wqIkmSJC1wi1u8yfHHH8+dd94JwB133MEJJ5zAG97whjGXXbNmDevXr+eoo45qEZqG3MjICJv9JgcdxiZvs1/fxMjIzR53DYyMjLBkyZJBh6ExWP+oH9ZLw8c6bHa1rKcmvSISEa+JiFURsWrt2rXTepMzzzyT22+/HYDbb7+dM844Y1rbkSRptNmopyRJ7U16RSQzPwR8CGDfffed1k8AT3nKUzj11FO5/fbbWbx4MU996lPHXXbp0qUAHHvssdN5K21ijjrqKM655JpBh7HJu3Ore7L8/vf2uGvAX+xm32zUU2D9o/5YLw0f67DZ1bKeatJH5LDDDmOzzcpbLVq0iJe//OUt3laSJEnSkGqSiOy0004ccsghRASHHHIIO+20U4u3lSRJkjSkmnRWh3JVZPXq1V4NkSRJktQuEdlpp514//vf3+rtJEmSJA2xZjc0lCRJkqQeExFJkiRJzZmISJIkSWrORESSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktSciYgkSZKk5kxEJEmSJDVnIiJJkiSpORMRSZIkSc2ZiEiSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmFg86gNGWL18+6BAkac54jhte7htJansuHLpEZMWKFYMOQZLmjOe44eW+kaS250KbZkmSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmTEQkSZIkNWciIkmSJKk5ExFJkiRJzZmISJIkSWrORESSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktSciYgkSZKk5kxEJEmSJDVnIiJJkiSpORMRSZIkSc2ZiEiSJElqzkREkiRJUnOLBx2ANJlFt17Hkp+cOugwJrTo1nUAQx/neBbdeh1w70GHIUnzwnyol/o13+svsA6bz0xENNSWL18+6BD6smbN7QAsXTpfT4T3njeftSQN0qZ2rpz/9RdYh81fJiIaaitWrBh0CJIk3cV6SZo99hGRJEmS1JyJiCRJkqTmTEQkSZIkNWciIkmSJKk5ExFJkiRJzZmISJIkSWrORESSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqbnIzP4XjlgLXNbn4jsD104nqCFiGQZvvscPlmFYbEpl2CMzdxl0MMNoivVUK5vCd2+qFlqZF1p5YeGVeaGVF2ZW5r7qqSklIlMREasyc9852XgjlmHw5nv8YBmGhWXQoCzE/bbQyrzQygsLr8wLrbzQpsw2zZIkSZLUnImIJEmSpObmMhH50BxuuxXLMHjzPX6wDMPCMmhQFuJ+W2hlXmjlhYVX5oVWXmhQ5jnrIyJJkiRJ47FpliRJkqTmTEQkSZIkNddXIhIRh0TETyNiJCLeMsb8LSPi03X+9yJiWZ2+LCLWR8S59XFcZ519IuJHdZ33R0TMVqEaluGsus3evHsNYxnqvEdExHci4sL6uW9Vp8+L/TBJGebFfoiIl3ZiPDci7oyIveu8ebEfJinDfNkPm0fE8fXzvigi3trvNudJGVbX6edGxKq5LsNCNhfns2E3F+eOYTcXx+kwm0F5t4iIj9bynhcRBzUOfdr6KPMTIuIHEXF7RLxg1LzDIuLn9XFYu6hnZoZlPi0iboiIL804kMyc8AEsAi4G7g9sAZwHPGTUMn8CHFefvxj4dH2+DLhgnO2eDRwABPBl4BmTxTLdxxyW4Sxg37mKexbLsBg4H3hkfb0TsGie7YeJyjAv9sOoZR4OXDLfjodJyjAv9gPwh8CJ9fnWwOp6nE+6zWEvQ329Gti5xX5YyI+5Op8N82Ouzh3D/Jir43RYHzMs7+uAj9bn9wLOATYbdJlmqczLgEcAJwAv6EzfEbik/t2hPt9h0GWayzLXeQcDzwa+NNNY+rkish8wkpmXZOZvgBOBQ0ctcyhwfH1+MnBwxPi/6EbErsA9M/M7WUp0AvDcPmKZrlkvwwDMpAxPA87PzPMAMnNdZt4xz/bDmGWYw1jHM1vfpZcAn4J5fTzcVYYBmEkZEtgmIhYDS4DfADf1uc1hL4Pa2RTOZ1O1KZw7pmqhHaczKe9DgP8FyMxfAjcA8+EGgJOWOTNXZ+b5wJ2j1n06cEZmXpeZ1wNnAIe0CHqGZlJmMvN/gZtnI5B+EpGlwOWd11fUaWMuk5m3AzdSfuEBuF9E/DAivhYRj+8sf8Uk25xNc1GGno/Wy8x/PceJy0zKsCeQEXF6vcz2ps7y82U/jFeGnvmwH7pexIaKeD7th65uGXrmw344GbgFuAr4BfBPmXldn9ucTXNRBij//HwlIs6JiNfMXfgL3lyez4bVXJ47htVcHafDaiblPQ84NCIWR8T9gH2A+8x5xDM3k3N/63pjtgxN3Iv7WGasfyZGj/k73jJXAffNzHURsQ/w+Yh4aJ/bnE2zXobMvAl4aWauiYhtgc8Cf0T5NXsuzKQMi4EDgccAtwL/GxHnMPYvM8O6H8YsQ83K58t+KDMj9gduzcwLprDN2TQXZYD5sx/2A+4AdqNcSv9GRJzZ5zZn06yXITMvAR6XmVdG6aNzRkT8JDO/PpuBC5i789kwm6tzxzCbq+N0WM2kvB8B9gJWAZcB3wZun9Xo5sZMzv2t643ZMjRx93NF5Ao2zmh3B64cb5l6CXI74LrMvC0z1wFk5jmU9mh71uV3n2Sbs2kuykBmrql/bwY+STnpDF0Z6vSvZea1mXkrcCrwaObRfmD8Msyn/dDzYjb+NXA+7Yee0WWYT/vhD4HTMvO3tfnAtyjNB/rZ5myaizKQmVfWv78EPsfc7oeFbE7OZ0NuTs4dQ25OjtMhNpP/l27PzDdk5t6ZeSiwPfDzBjHP1EzO/a3rjdkyNHH3k4h8H3hgRNwvIragnEROGbXMKUBvpIAXAF/NzIyIXSJiEUBE3B94IKWD2lXAzRHx2Np84+XAF2ahPM3KUC897lynbw48C5jLX3imXQbgdOAREbF1PWk8EfjxfNoP45VhHuyHv6d0Urw5Ih4VEQ+mdOj7y4g4MsoobK9ikv0QEV+O2RuNYyb7gYjYDPgDSpvSXnzDvh+6ZfgF8OQotgEeC/ykz20OdRkiYpt6RYo6/WnM7X5YyGb9fNYo7pmYi3PH6oh4ypxHPkqUETGzfv4T6bfMH4iIa4FruftxelBErGHDuWZg+vi8Z/L/0tb1vENEPBW4PTM3le/1eE4HnhYRO0TEDpRz7ulzFOdsal3fjS/7613/TOBnlKsBf1WnvQt4Tn2+FfAZYIQy+s/96/TnAxdS2g3+AHh2Z5v7UirIi4EPUO/yPleP2S4DsA1lRIjz6/xjmeNRT6ZbhjrvZTXOC4B/mG/7YYwyJLB8HuyHXwOv6az7P8BVY2yzyX4ADge+OcP9cBDw3VHbHfb90D2m71GnX0j55+8vJtrmfCoDZQSU8+rjwhZlWMiPWTyf/UPr2AdU5rHOHauBpzSIe6P3oYwIlMDiWSjzckoTrEvHOU4vBX7bPdcMcP9N+nnP4Ly0DPgpcBFwJrDHoMs7hc9lsjI/hnIV4RZgHXBhZ91X1M9iBDhi0GVpVOZvAGuB9XWZp083jqgblOaViEjggZk5Ms78xVk60Q1URNwOPLgXZ5S+CCdm5n8MKJ7DgVdl5oGDeH9J6oqI1ZRz0pkt3yfKvS8uBTafaV0REQdSzuu7jzP/IODj482fwvvMuF6brc97WOpYzX/eWX2BiIi3RMTFEXFzRPw4Ip7Xmbc8yohgN0bEtRHx6Tr9XyPivaO288WI+NP6fHVE/EVEnB8Rt0TEf0bEvWszopsj4sx6qbJ7GfyIiLg8Iq6PiNdGxGPq+jdExAdGvdcrotwE6vooo8vsUaf3Ot6eFxG/iogX1UvfV0TEmyPiasroTRdExLM729u8lm/Mm2hFxKFRRny6qX5Wh9Tpu0XEKRFxXZQb/7y6s85mnc92XUScFBE7Rrnh068oY3WfV+d/FXgS5RL+ryJiz4j4WES8u48YzoqIV0322dR5WT/bn9f5/xrFXsBxwAH1/W+Y7HsjSa2Mdz6t83p1yGER8Yt6Lv+rzrpLotw88Pp6bnxTRFxR5/0XcF/gi/Xc1x2l7KVjbW+M2LaLiBMiYm1EXBYRb6vxPoUyZOtuddsf66OcR0aph3evr59Vz/s3RMS3I+IRnWVX13rtfOCWKM1gV0fEG2vdeWOUmwtu1Vln3O1NEtdOUer4myLi+xHx7oj4Zmd+RsTrIuLn1L4fEfG7ddkb69/f7Sw/Zt1Zp6/v7ds67VF1H2xeX49bx2kTM+hLQz7aPCjtcnejJJ8volxq27XO+xTwV3XeVsCBdfp+lM5Lm9XXO1NGeLl3fb0a+C5wb8qwb7+kNF97FLAl8FXgHXXZZZTL4MfV93gapdnS5yk3Puqt/8S6/HMplzn3ooww8zbg253yJLC88/ogyugcf1/fewnwJjo306KMkf2jcT6f/ShDED61fg5LKVcyAL4G/FuNe2/K5ciD67w/rZ/B7vV9Pwh8aoI4z6L8GtV7/THg3X3EcNd6fX42X6J0FLxvjfeQOu9w4JuD/j768OHDR+bGTYUmOp926pAP1/P7I4HbgL3q/L+r5+od6vrnA1eM9T79bG+MOE+g9N3btq77M+CVdd5B3fcaY9275gN/Taknd6mvH02p+/an/HB1WI11y07c51I6Fi/pTDubUqfvSGkK9dopbG/MplmUvjsnUvo1PoQyvOs3O/OTknTtWD+zHYHrKSMkLqbcH+Z6YKe6/ER151eBV3e2/Y9suEnihHWcj03rMfAAfAxox5cT26H1+QnAh4Ddx1juIuCp9fnrgVM781ZThmztvf4s8O+d1yuAz9fnvZP+0s78dcCLRq3/p/X5l3sn+fp6M0oStEd9PVYi8htgq8603Sg33LlnfX0y8KZxPo8PAu8bY/p9KG1/t+1Mew/wsc7nc3Bn3q6UtsCLx4nzLMZPRMaMYfR6fX42B3bmnwS8pT4/HBMRHz58DMmDjRORcc+nnTpk9878s4EX1+eX0GmnThkEpJ9EZMztjYpxESVJeUhn2h8DZ9XnBzF5IrIG+GdKH73tOvP+HfibUcv/lA0/yq0GXjHGZ/ayzut/YMM/8f1s726JSC3jb4EHdaa9m7snIk/uvP4j4OxR2/lOrWcmqztfRenkDmUo2cuBJ9TXE9ZxPjath02zFoiIeHnnUu0NwMMoVzigXDkI4OyIuDAiXtFZ9XhKp0rq3/8atelrOs/Xj/H6HtNcfg/g2E6819UYJ7rhztrM/HXvRZZhTL8FPD8itgeeAXxinHXvQ+mwNdpulGEJu3cQvawTxx7A5zpxXkQ5+d57gjjHM14Mo/Xz2VzdeX4rd98PkjRs+jmfjndu242Nb9DWfT6Rfs6VOwNbUM79Pd16oB/bA68B3pOZN3am7wH8ea/Mtdz3oZSnZ6yyjBd3P9sbyy6UhG+yz7A7bTc2/kxgw+cyWd15MqWZ8G7AEyhJzjc6ZZhq/a95qp8bGmqeq20rPwwcDHwnM++IiHOpN7TJzKuBXtvNA4EzI+LrWTpYfxy4ICIeSblM+vlGYV8OHJOZ4yUOY8kxph1P+eVlMaXsayZ4vweMMf1KYMeI2LZzQr0v5det3nqvyMxvTSHO8YwXw1jLTfWz6RnrM5KkYTDu+TRK5/KJXEVpktUbLnb0Hb1ncu67lnK1YI/O9rv1QD+up/yYd1JEPK9Txt75/JgJ1p1K7P1sbyxrKc2bd6c0O4Ox74rejeVKymfSdV/gNCapOzPzhoj4CvBCyv8Wn8rM3rZnUsdpnvGKyMKwDeXksRYgIo6gXBGhvv6DXqc5yskyKb9CkZlXUMab/i/gs5m5vp83jNJReyaOA94aEQ+t29suSsf4Z9b51wDviIg3TrKdz1PazB7FqLt813JfFBH/B/wncEREHBwRT4rS0f7BmXk55e6w74mIrWqnv1ey4crKccAxsaEj/S4RcehUC1s7OF7aiWGziFga5b4jo4312fxBn291DbB7lHHDJWmYzOR8ehLlvLhDRCylNCXuuoYyvPV0fJFyc9BjImLbGt+fATd16qCt66/71NhXR723Uk9mngW8lHLVZ/86+cPAayNi/yi2iYjfi4jPROmgfs/uNmpdsfUEsY63vW0nKmBm3gH8N3B0lPuBPJhyT6uJ6vNTgT0j4g+jdKJ/EaVvyZf6qDuh3Pj25ZTbJHyyM30mdZzmGRORBSDLDYXeS2m7eQ3wcEqTpZ7HAN+rJ5tTgKMy89LO/OPrOqObZc2ZzPwcpeP5iRFxE2Ws/WdTxr0GOJrSoe1vIuKFE2xnPaXvyf0oJ9muVwJ/kplPysyzgSOA91Hu9XEAG37peQmlPfGVlMroHZl5Rp13LOUz+0pE3EzpaLk/0zPSieFGSke/0b82jffZPKPP9/gq5d4FV0e5+ZYkDYuZnE/fRbmfwaWUe1icTOnX0fMe4G21uc9kP2BtJDOfCbyWMsjLJZR+Hp8EfthZbBsmb/5ErTuOAE6JiH0ycxWlRcIHKD8EjlD6n+yfmY8AbppirGNt73C46y7oE3k95S7pV1Pq+0+x8Wc4+r3WUW5e++eUPp9vAp6Vmb26ZaK6E8q+fiBwTWae19nuTOo4zTPeR0STiognUJpoLcvMO/tc51eZeY/6/C8ol1+3BD6Xme+ol9m/TDmh/y7lcu2hmbk+Ih5DuUJxS53/DMpVjRHKSB1rKJXKXpRLvfevf/8lM98/RiyfAZ5S1/ufzHxzRLydctJcA5ySmX/RWf4g4I2Z+away4cov9hcA6ykJGWLgaMz8wtR7s3xe5SRQbahVIhHUy7nP4xyo7+XZWZGxD6UDov3qPMPz8yr6q9cX8rMk/v5fCVJ44uI/0fpeP7ESZZ7E/DrzHx/RLwPeGRmPjkiDqbcnO5lUe69sW9m9ob4fTml+dBayvl9NWXgkTWUvo4HUPq3HE/5AW1z4A8y8yej3nsrSufyfSnNov4sM/+vXgl5IKWT+YrM/EZnnY9R64qI+BtK86lXUEarHKtuOYtyZeJxlH/8H05JbvYFfocygMvJddsb1dWUOu13gOf36nNptnlFRBOKMqb3UcB/9JuEjFr/aZQT6n6U4fv2qYkNdfq/ZuZDgRso/+wDfJQyFOEBbGgi9hvg7ZThePfOzE/XZR8MPL1u/x013u77PwR4HqXi2Bt4TEQ8NzPfBayijPr1F4whynjox1ESpEsoQxx/NTMfQ7kfyD9GxDZ18QOAwzLzyfX1oyhDUT6Ekig9rsa2EnhBZu4DfASYajteSdIoEbFrRDyuNmt9EOVX+s/1serXgcfX5/sC96jn6gPZ0Hm69x77AC+mnN9/n9KagPqPfK8+2bvThPnazHw0JdkY6yrM6+r6D6dcPTi+JifPAS6u2/rGGOsREf9AGfr+CMqIVxPVLdtn5hMzs3dfsF1r+Z5FGfa4V1fvS2kpsDelT+kf099nKE2bndU1rig3wFsFnEc52U3H0+qjdwn7HpQE5BfApZl5bp1+DrAsyuhW22bmt+v0T1JOluP5n8y8DbgtIn5JGV2ldxOrV1NOzhdn5hfrtE9QRuiYrNP9XpQrIU+ro2/1yvKczmX9rShXYgDOyMzrOuufXfvXEGVggGWUZOthwBkRAaXyuGqSOCRJk9uCMgT6/Sjn2hMp97CYzDmUH8i2pTRD+gHlH/LHA0eOWvbxlKv6twJExCmTbLvXHPgcSuIy2oGUOorM/ElEXAbsyeTNsf4a+F5mvqbG8SAmrls+PWr9z9cfFn8cEb0RyZ5Wy/d9yhWcOyhXUL4wSSzSjJiIaFyZeRGlqdFMBGW4wg9uNLE0zeq2Pb2D0uwqprj90du46zudmR+OiLWMXQFM5ipKovEoSvtWamzPz8yfdhesnQ5v6SOuAC6sV3okSbMkMy+jMwjLFNb7bW16dQSlCdP5lCveD6A0r7rbKlPYfK8e2Khu6phqfdfzfUrytGP9AWyyumWi+ik6f985uq4GqMmNNCdsmqW5djrwiojo9RdZGhH3Gm/hzLweuDkiHlsnvbgz+2bKXW2n4nvAEyNi54hYRLn8/bU+1ruB0u/jb2ufEShlWRH1rBwRj5piLD8FdomIA+r6m/dGBZEkDczXKU2nvk5pjvVa4NzOcLLd5Z4XEUvqFZRnd+ZNp376OmUULSJiT8oV9p9OuEZxGqVJ1f/UOGajbplSXS3Nlil1Vt95551z2bJlcxeNJGlS55xzzrWZucug4xhG1lOSNHj91lNTapq1bNkyVq1aNf2oJEkzVtuSawzWU5I0eP3WUzbNkiRJktSciYgkSZKk5kxEJEmSJDVnIiJJkiSpORMRSZIkSc2ZiEiSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmTEQkSZIkNbd40AFo07Jy5UpGRkYGHca0rFmzBoClS5cOOJLZs3z5clasWDHoMCTNc8Nybt8Uz9Nj8dythcJERLNqZGSEcy+4iDu23nHQoUzZoltvBODq2zaNw2LRrdcNOgRJm4hhObdvaufpsXju1kKy6R7JGpg7tt6R9Q9+5qDDmLIlPzkVYF7GPpZeeSRpNgzDuX1TO0+PxXO3FhL7iEiSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmTEQkSZIkNWciIkmSJKk5ExFJkiRJzZmISJIkSWrORESSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktSciYgkSZKk5kxEJEmSJDVnIiJJkiSpORMRSZIkSc2ZiEiSJElqzkREkiRJUnPNEpGVK1eycuXKVm8nSUPJc+Hwct9Imi7PH9OzuNUbjYyMtHorSRpanguHl/tG0nR5/pgem2ZJkiRJas5ERJIkSVJzJiKSJEmSmjMRkSRJktSciYgkSZKk5kxEJEmSJDVnIiJJkiSpORMRSZIkSc2ZiEiSJElqzkREkiRJUnMmIpIkSZKaMxGRJEmS1JyJiCRJkqTmTEQkSZIkNWciIkmSJKk5ExFJkiRJzZmISJIkSWrORESSJElScyYikiRJkpozEZEkSZLUnImIJEmSpOZMRCRJkiQ1ZyIiSZIkqTkTEUmSJEnNmYhIkiRJAmDdunUceeSRrFu3bs7fy0RE/7+9u4+2rK7rOP7+zAwMA4jQgITjw4ijy6yI5EHxgSYFnLRClhQYxai1TK0RKS1ZpVmWaVgK2crIJcyUj+AyCXEGSNAeUARkHlCRESeBSBFEUVC68OuP/bty5s59mnvP3uecmfdrrbPuPvvss/fn/M7dv32+++EcSZIkCYC1a9eyefNm1q1b1/qyLEQkSZIkcdddd7F+/XpKKaxfv771oyKLWp17j9tvv53777+fM844o6tFagC2bt3KggfKoGMIWPCD77J1672uc0Nm69atLFmyZNAxNAm3U1Ozb++Offdo2lX69rVr1/LQQw8B8OCDD7Ju3TrOPPPM1pY34xGRJK9Icm2Sa++8887WgkiSNBdupySpP6644grGxsYAGBsb4/LLL291eTMeESmlnAecB3DkkUfOeXfIsmXLADjnnHPmOguNgDPOOIPrbvnGoGMIeGiv/Vhx6MGuc0PGvZz953aqffbt3bHvHk27St9+3HHHcemllzI2NsaiRYs4/vjjW7zQbY8AABK1SURBVF2e14hIkiRJYvXq1SxY0JQHCxcu5PTTT291eRYikiRJkli6dCmrVq0iCatWrWLp0qWtLq+zi9UlSZIkDbfVq1ezbdu21o+GgIWIJEmSpGrp0qWce+65nSzLU7MkSZIkdc5CRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkdW5RVwtasWJFV4uSpKFlXzi8fG8kzZX9x9x0VoisWbOmq0VJ0tCyLxxevjeS5sr+Y248NUuSJElS5yxEJEmSJHXOQkSSJElS5yxEJEmSJHXOQkSSJElS5yxEJEmSJHXOQkSSJElS5yxEJEmSJHXOQkSSJElS5yxEJEmSJHXOQkSSJElS5yxEJEmSJHXOQkSSJElS5yxEJEmSJHXOQkSSJElS5yxEJEmSJHXOQkSSJElS5yxEJEmSJHXOQkSSJElS5yxEJEmSJHXOQkSSJElS5yxEJEmSJHXOQkSSJElS5yxEJEmSJHXOQkSSJElS5xYNOoB2PQvvu5slX7500DF22sL77gIYyeyTWXjf3cDBg44haRcxDH37rtZPT8a+W7sTCxH11YoVKwYdYc5uv30MgGXLdpUNwMEj/X5IGh7D0pfsev30ZOy7tfuwEFFfrVmzZtARJEl9Zt8uqQ1eIyJJkiSpcxYikiRJkjpnISJJkiSpcxYikiRJkjpnISJJkiSpcxYikiRJkjpnISJJkiSpcxYikiRJkjpnISJJkiSpcxYikiRJkjpnISJJkiSpcxYikiRJkjpnISJJkiSpcymlzH7i5E7gv/u07AOBb/VpXl0YpbyjlBVGK+8oZYXRyjtKWWGweR9fSjloQMsearvxdsqs/TcqOcGsbRiVnDCcWWe1ndqpQqSfklxbSjlyIAufg1HKO0pZYbTyjlJWGK28o5QVRi+vdt4ovcdm7b9RyQlmbcOo5ITRyjqRp2ZJkiRJ6pyFiCRJkqTODbIQOW+Ay56LUco7SllhtPKOUlYYrbyjlBVGL6923ii9x2btv1HJCWZtw6jkhNHKup2BXSMiSZIkafflqVmSJEmSOtdKIZJkVZKbkmxN8oZJHl+c5MP18c8lWd7z2GFJrk5yY5LNSfZqI+N8syY5LckNPbeHkhzeZtZ55t0jydrapl9KctYQZ90zyfk168YkK9vOOsu8xya5PslYkpMnPLY6yc31tnrIs65Pck+SS9rOOd+8SQ7v6Q82JTlliLM+Psl1tT+4Mckr286qndPGOp7kqjrP8W3Bowacc9L1O8kTaj97c+1395xvzhazXpDkaz1t2pdtaxv9UBvt2lLOYWvTKfvLJEek2f5vTXJukgxx1qFa/+vj+yW5Pcm7e8a10qZ9UUrp6w1YCHwVOBTYE9gIPHXCNK8G3lOHTwU+XIcXAZuAn6n3lwIL+52xH1knTPPTwC1t5exT2/4a8KE6vDewDVg+pFl/Bzi/Dj8KuA5YMARtuxw4DFgHnNwz/seAW+rfA+rwAcOYtT72POCXgEva/p/tQ9s+GXhSHX40cAew/5Bm3RNYXIf3revYo7toY2+tv7dTruPAVcCRw5CzPjbp+g18BDi1Dr8HeNUQZ71g4rQDfv+n7If63a4t5hy2Np2yvwSuAY4BAnwS+IUhznoVQ7T+18fPAT4AvLtnXN/btF+3No6IHA1sLaXcUkp5APgQcOKEaU4E1tbhi4Dn1ersBGBTKWUjQCnlrlLKgy1k7EfWXi8BPthiznHzyVuAfZIsApYADwDfHdKsTwX+DaCU8k3gHqDt78eeMW8pZVspZRPw0ITnPh+4vJRydynl28DlwKohzUop5d+Ae1vMN9Gc85ZSvlJKubkO/w/wTaDNH/KbT9YHSik/rHcX46mvw2ZU1vG+r9+1X30uTT8LTb/7omHM2qK+90Mttetu3V8mOQTYr5RydWk+Qa9jwP+rHfft81qnkhwBHAxc1jOurTbtizYacxlwa8/92+q4SacppYwB36E5+vFkoCTZUA87/UEL+fqVtdcpdFOIzCfvRcD3afaQfB14Rynl7iHNuhE4McmiJE8AjgAe22LW2eZt47lz0fXy5qsveZMcTbOH6Kt9yjWZeWVN8tgkm+o83l4/DGg4tLmOn19Py3hjH055aGP9XgrcU/vZfs0T2u2L/qKeXvTOJIv7ML82+qE22rXN/nKo2nSK/nJZnc+c5tlx1nFDsf4nWQD8NfD6SebZRpv2RRuFyGRvwsSv5ppqmkXAs4HT6t+Tkjyvv/FmlWPW0yR5OnBfKWVLP4NNYT55jwYepDlc+wTg95Mc2t94s8oxm2neR7OiXAu8C/gvYGySaftpNnnbeO5cdL28+Zp33rpH55+Al5VSdtgL1EfzylpKubWUchiwAlid5OC+JdN8tbWOn1ZK+WngOfX2G3PINttlDdM825zvWcBTgKNoTof7wz7Ms41+aCjfqyn6y6Fr0yn6y6H8X52mbx+m9f/VwKWllFsnjB/qzwxtFCK3sf3e68cAE/cK/miaeqrQI4G76/hPl1K+VUq5D7gUeFoLGfuRddypdHM0ZLss1c7k/TVgfSnl/+rpTv9Ju6c7zTlrKWWslHJmKeXwUsqJwP7AzS1mnW3eNp47F10vb77mlTfJfsAngD8upXy2z9km6kvb1r1lN9JsmDQcWlnHSym317/30pyXffQAc07lW8D+tZ/t1zyhpb6olHJHafwQOJ/5tym00w+10a6t9JfD2KY92Xr7y9vqfOY1z0m00rcP2fp/DPC7SbYB7wBOT/I22mvTvmijEPk88KQ03ySxJ80H9YsnTHMxMP6tIycDn6rnrW0ADkuyd12xfw74YgsZ+5F1/DDYr9Ccw9eF+eT9OvDcNPYBngF8eRiz1vd/H4AkxwNjpZQ2/w9mm3cqG4ATkhyQ5ACaa502tJQT5pd1EOact07/MWBdKeXCFjOOm0/WxyRZUocPAJ4F3NRaUu2svq/j9fTRA6H5ZkLgF4H5Hh3v+/pdtwFX0vSz0PS7H59XykYrfVHdoz9+bcuLmH+bQgv9UEvt2kp/OYRtOml/WUq5A7g3yTNq1tMZ8P/qVFmHbf0vpZxWSnlcKWU58Dqa/4M3tNim/VFauAIeeAHwFZpzE/+ojvsz4Jfr8F7AhcBWmiv5D+157q/TVJtbgL9qI18fs64EPtt2xn7kpfmmhwtr234ReP0QZ11O8wHuS8AVwOOHpG2Potmz8H3gLuDGnue+vL6OrTSHw4c5678DdwL312meP6x5a3/wf8ANPbfDhzTr8TTf+rex/n1FF/+33tp/b+tjO6zjwD403+q3qfat59CHb3psY/2m+Raea2r+C6nfAjSkWT8FbKb5HPDPwL6DzDpdP9RGu7aUc9jadMr+kuZsjS11nu+m/vj2sGVlCNf/nnm8lO2/NauVNu3HzV9WlyRJktQ5v15SkiRJUucsRCRJkiR1zkJEkiRJUucsRCRJkiR1zkJEkiRJUucsRDSykqxM8sxB5wBI8pwkNya5IcmSJGfX+2cneWWS06d57qOTXDSPZb82yd5zfb4kjYok32thnocneUHP/Tcned085vcrSb6U5MoJ41cmuWQ+WeeQ5YIkJ888pTQYi2aeRBpaK4HvAf818YEki0opYx1mOQ14Rynl/Lr83wYOKs2v2E6rNL/UOp8NxWtpvhf+vnnMQ5J2V4fT/M7CpX2a328Cry6lXDnjlLM0gG3aQJap3Y9HRLSDJP+S5Lq6R/8VddzCumdlS5LNSc5M8sQk1/c870lJrqvD25K8NcnVSa5N8rQkG5J8Nckr6zQrk3w6yUeSfCXJ25KcluSauown1ukOSvLRJJ+vt2clWQ68EjizHoV4Ts33N3Uv1NlJbk5yUJ3HgiRbx38FtSfzvknOr8vblOTFdfxL6rgtSd7eM/0J9TVdn+TC+vzfAn4VeFOS9ye5mOaHjj6X5JTevWtJViS5IsnGOo8nJlmeZEtPO59dX+emWtCMt9VVSS5K8uW6nCR5DfBo4MqJe98kaVeW5PU9feWf1nHL69GIf6zbsMvy8K9iH1Wnvbr2s1vS/Hr1nwGn1G3JKXX2T6197i21n51s+TtsJ5K8CXg28J4kZ0+T/agkX0hyaJJ9kryvvpYvJDmxTvPSup35V+CyqbYDddoj6vb0urqtPWSGttuhLaZYZnraavN4+0wz/sPZ/ujSBUlePNW2TRr4Lyp6G74b8GP17xKaX+JcChwBXN4zzf7175U8/MutbwXW1OFtwKvq8Dtpfnn0EcBBwDfr+JXAPcAhwGLgduBP62NnAO+qwx8Anl2HHwd8qQ6/GXhdT6YLgEuov2wK/Anw2jp8AvDRSV7r28eXU+8fQPPB/us16yKaX6R9EXAg8BlgnzrtHwJv6ln2yT3z+V7P8I9yAp8DTqrDewF70/yS/JY67hXAH9fhxcC1wBNqW30HeAzNDoSre9pkG3DgoP9vvHnz5q3t23jfWvv084DUPvES4Njan471bJc+Avx6Hd4CPLMOv62n330p2/8K9ZtpjrQvrv3+XcAeE3JMup2oj10FHDlJ9pU15zNpfpH7cXX8W3sy7k/zq9r71Fy38fA2edLtALBHzXtQne4U4H11eLttU0+W6dqid5kvBi4HFgIH19d8yDTjTwLW1ufuCdxK81li0m3boP+fvA3+5qlZmsxrkpxUhx8LPAm4CTg0yd8CnwAuq4+/F3hZkt+j6fyO7pnPxfXvZmDfUsq9wL1JfpBk//rY50spdwAk+WrPfDcDP1+Hj6PZOzU+3/2SPGKK7BeWUh6sw+8DPg68C3g5cP4k0x8HnDp+p5Ty7STHAleVUu6sud5Ps4EbA54K/GfNsifNhmBWauZlpZSP1WX9oI7vnewE4LA8fE7vI2na/wHgmlLKbfU5N9BscP9jtsuXpF3ICfX2hXp/X5q+8uvA10opN9Tx1wHL6zbnEaWU8VN5PwD84jTz/0RpTq39YZJv0nzYvq3n8aOYfDvxLzPk/gmaAuqE0pyWO/5afjkPX5eyF81ON2h2AN7d8/zJtgP3AD8FXF63JwuBO6YKMIu26F3ms4EP1u3qN5J8ur72qcZ/Ejg3yWJgFfCZUsr9Sabatn1t+ubSrs5CRNtJspLmw/kxpZT7klwF7FU/oP8M8Hzgd2hORXo58FGaIw+fAq4rpdzVM7vx6yMe6hkev79owjQTp+udZkHNc/+ErJO9hO+PD5RSbk3yjSTPBZ5Ocx3HDi8ZKJOMm0xoOuiXTPH4TKaa78Rp1pRSNmw3snlfetvqQVx/Je2+AvxlKeUfthvZnLY7sa9cwuz6314z9bc7O79xd9AUGj8LjBciAV5cSrlpuwUkT6dnmzZNrgA3llKOmWWGmbL3LnO67eEOSik/qJ8bnk+zc/KDPdPvsG2TvEZEEz0S+HYtQp4CPAMgzbUVC0opHwXeCDwNfrRXfwPw90x+xKEfLgN+d/xOksPr4L00p3tN5700F3J/pOdIyXTzPoDm9KmfS3JgkoXAS4BPA58FnpVkRZ127yRPnu2LKKV8F7gtyYvq8xdnx2+72gC8KskedZonJ9lnhlnPph0kaVeyAXh5kn0BkixL8qipJi6lfJvmiPwz6qhTex6eSx861XZiJvcALwTeWncwQfNa1vRc7/GzO5nlJuCgJMfU5++R5CenmniGtpjoMzTXzyxMc83lscA104wH+BDwMuA59bWNv8ad3bZpN2AhoonWA4uSbALeQvPhG2AZcFU9FHwBcFbPc95Pc1ThMtrxGuDIeoHbF2kuUgf4V+Ck1IvVp3juxTSH7Kcqkv4cOKBecLcR+Pl6qthZNNe/bASuL6V8vB6Cfynwwdo+nwWespOv5TdoTn3bRHNO749PePy9wBeB6+vFg//AzEc+zgM+GS9Wl7SbKKVcRnNK0dVJNgMXMXMx8ZvAeUmuptlD/506/kqa0397L1afafmTbidm+dxvAL8E/F096vEWmus8NtV+/y2zmU/P/B6g+ebFt9ft2A0016FMZ6q2mOhjNNd4bqQ58+EPSin/O814aD4LHAtcUbPB3LZt2g2klIlnpUg7p57X+shSyhsHnWWiJEcC7yylTFWoSJJ2A0n2LaV8rw6/ATiklHLGgGMNhG2hYWE1qnlJ8jHgicBzB51lotq5vorJrw2RJO1eXpjkLJrPPv9Nc4R7d2VbaCh4RESSJElS57xGRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkdc5CRJIkSVLnLEQkSZIkde7/AXYF4WvwEGA5AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1008x648 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(14,9))\n",
    "feature_index = 0\n",
    "for ii in range(3):\n",
    "    for jj in range(2):\n",
    "        ax = sns.boxplot(X.iloc[:, feature_index], ax=axes[ii,jj])\n",
    "        ax.set(title=X.columns.values[feature_index])      \n",
    "        feature_index += 1\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "berdasarkan hasil box-plot ditemukan data yang outlier pada variabel asymmetric coefficient dan length of kernel groove, namun untuk memastikan lagi dilakukan pengecekan dengan batas atas dan batas bawah"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train-Test Data Splitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 123)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FEATURE SELECTION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## scatterplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(X.corr(),linewidths=.5,annot=True,cmap='RdYlGn')\n",
    "fig=plt.gcf()\n",
    "fig.set_size_inches(15,8)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## korelasi pada variabel prediktor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(X.corr(),linewidths=.5,annot=True,cmap=\"YlGnBu\")\n",
    "fig=plt.gcf()\n",
    "fig.set_size_inches(15,8)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EKSPLORASI DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area (A)</th>\n",
       "      <th>perimeter (P)</th>\n",
       "      <th>Compactness C=4*pi*A/P^2</th>\n",
       "      <th>length of kernel</th>\n",
       "      <th>width of kernel</th>\n",
       "      <th>asymmetry coefficient</th>\n",
       "      <th>length of kernel groove</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>14.847524</td>\n",
       "      <td>14.559286</td>\n",
       "      <td>0.870999</td>\n",
       "      <td>5.628533</td>\n",
       "      <td>3.258605</td>\n",
       "      <td>3.700201</td>\n",
       "      <td>5.408071</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.909699</td>\n",
       "      <td>1.305959</td>\n",
       "      <td>0.023629</td>\n",
       "      <td>0.443063</td>\n",
       "      <td>0.377714</td>\n",
       "      <td>1.503557</td>\n",
       "      <td>0.491480</td>\n",
       "      <td>0.818448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>10.590000</td>\n",
       "      <td>12.410000</td>\n",
       "      <td>0.808100</td>\n",
       "      <td>4.899000</td>\n",
       "      <td>2.630000</td>\n",
       "      <td>0.765100</td>\n",
       "      <td>4.519000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>12.270000</td>\n",
       "      <td>13.450000</td>\n",
       "      <td>0.856900</td>\n",
       "      <td>5.262250</td>\n",
       "      <td>2.944000</td>\n",
       "      <td>2.561500</td>\n",
       "      <td>5.045000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>14.355000</td>\n",
       "      <td>14.320000</td>\n",
       "      <td>0.873450</td>\n",
       "      <td>5.523500</td>\n",
       "      <td>3.237000</td>\n",
       "      <td>3.599000</td>\n",
       "      <td>5.223000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>17.305000</td>\n",
       "      <td>15.715000</td>\n",
       "      <td>0.887775</td>\n",
       "      <td>5.979750</td>\n",
       "      <td>3.561750</td>\n",
       "      <td>4.768750</td>\n",
       "      <td>5.877000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>21.180000</td>\n",
       "      <td>17.250000</td>\n",
       "      <td>0.918300</td>\n",
       "      <td>6.675000</td>\n",
       "      <td>4.033000</td>\n",
       "      <td>8.456000</td>\n",
       "      <td>6.550000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         area (A)  perimeter (P)  Compactness C=4*pi*A/P^2  length of kernel  \\\n",
       "count  210.000000     210.000000                210.000000        210.000000   \n",
       "mean    14.847524      14.559286                  0.870999          5.628533   \n",
       "std      2.909699       1.305959                  0.023629          0.443063   \n",
       "min     10.590000      12.410000                  0.808100          4.899000   \n",
       "25%     12.270000      13.450000                  0.856900          5.262250   \n",
       "50%     14.355000      14.320000                  0.873450          5.523500   \n",
       "75%     17.305000      15.715000                  0.887775          5.979750   \n",
       "max     21.180000      17.250000                  0.918300          6.675000   \n",
       "\n",
       "       width of kernel  asymmetry coefficient  length of kernel groove  \\\n",
       "count       210.000000             210.000000               210.000000   \n",
       "mean          3.258605               3.700201                 5.408071   \n",
       "std           0.377714               1.503557                 0.491480   \n",
       "min           2.630000               0.765100                 4.519000   \n",
       "25%           2.944000               2.561500                 5.045000   \n",
       "50%           3.237000               3.599000                 5.223000   \n",
       "75%           3.561750               4.768750                 5.877000   \n",
       "max           4.033000               8.456000                 6.550000   \n",
       "\n",
       "            class  \n",
       "count  210.000000  \n",
       "mean     2.000000  \n",
       "std      0.818448  \n",
       "min      1.000000  \n",
       "25%      1.000000  \n",
       "50%      2.000000  \n",
       "75%      3.000000  \n",
       "max      3.000000  "
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data['class'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Importance Using Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\weight_boosting.py:29: DeprecationWarning: numpy.core.umath_tests is an internal NumPy module and should not be imported. It will be removed in a future NumPy release.\n",
      "  from numpy.core.umath_tests import inner1d\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
       "            oob_score=False, random_state=123, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RF = RandomForestClassifier(max_depth=None, random_state=123)\n",
    "RF.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.25014046, 0.25547969, 0.12046153, 0.08993603, 0.14722891,\n",
       "       0.13675339])"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RF.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['area (A)', 'perimeter (P)', 'length of kernel', 'width of kernel',\n",
       "       'asymmetry coefficient', 'length of kernel groove'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variables</th>\n",
       "      <th>feature importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>perimeter (P)</td>\n",
       "      <td>0.255480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>area (A)</td>\n",
       "      <td>0.250140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>asymmetry coefficient</td>\n",
       "      <td>0.147229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>length of kernel groove</td>\n",
       "      <td>0.136753</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>length of kernel</td>\n",
       "      <td>0.120462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>width of kernel</td>\n",
       "      <td>0.089936</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 variables  feature importance\n",
       "1            perimeter (P)            0.255480\n",
       "0                 area (A)            0.250140\n",
       "4    asymmetry coefficient            0.147229\n",
       "5  length of kernel groove            0.136753\n",
       "2         length of kernel            0.120462\n",
       "3          width of kernel            0.089936"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RF_fi = pd.DataFrame({'variables':X.columns, 'feature importance':RF.feature_importances_})\n",
    "RF_fi.sort_values(['feature importance'], ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pada penelitian ini peneliti memiliki batasan nilai feature importance, jika nilai feature importance < 0.05 maka variabel tersebut akan dihilangkan untuk langkah selanjutnya. \n",
    "\n",
    "Namun dikarenakan nilai compactness merupakan hasil dari variabel area (A) dan perimeter (p), maka variabel compactness dihilangkan."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# METODE KLASIFIKASI"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
       "            oob_score=False, random_state=123, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RF = RandomForestClassifier(max_depth=None, random_state=123)\n",
    "RF.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RF.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "yRF_predict=RF.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10  0  1]\n",
      " [ 1  9  0]\n",
      " [ 2  0 19]]\n"
     ]
    }
   ],
   "source": [
    "conf_matrixRF = confusion_matrix(y_test, yRF_predict)\n",
    "print(conf_matrixRF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Kama</th>\n",
       "      <th>Rosa</th>\n",
       "      <th>Canadian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Kama</th>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rosa</th>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canadian</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Kama  Rosa  Canadian\n",
       "Kama        10     0         1\n",
       "Rosa         1     9         0\n",
       "Canadian     2     0        19"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ClassRF= ['Kama','Rosa','Canadian']\n",
    "conf_matrix_dfRF = pd.DataFrame(data=conf_matrixRF, columns=ClassRF, index=ClassRF)\n",
    "conf_matrix_dfRF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(conf_matrix_dfRF, annot=True, cmap=\"YlGnBu\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Metode Evaluasi Kebaikan</th>\n",
       "      <th>Nilai</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Akurasi</td>\n",
       "      <td>0.904762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Presisi</td>\n",
       "      <td>0.906410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Recall</td>\n",
       "      <td>0.904618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>F1 Score</td>\n",
       "      <td>0.902510</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Metode Evaluasi Kebaikan     Nilai\n",
       "0                  Akurasi  0.904762\n",
       "1                  Presisi  0.906410\n",
       "2                   Recall  0.904618\n",
       "3                 F1 Score  0.902510"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracyRF=accuracy_score(y_test, yRF_predict)\n",
    "precisionRF=precision_score(y_test, yRF_predict,average='macro')\n",
    "recallRF=recall_score(y_test,yRF_predict,average='macro')\n",
    "f1scoreRF=f1_score(y_test, yRF_predict,average='macro')\n",
    "\n",
    "metode = ['Akurasi','Presisi','Recall','F1 Score']\n",
    "nilai = [accuracyRF,precisionRF,recallRF,f1scoreRF]\n",
    "\n",
    "output = pd.DataFrame({'Metode Evaluasi Kebaikan':metode, 'Nilai':nilai})\n",
    "output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KNN Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=1, n_neighbors=10, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn = KNeighborsClassifier(n_neighbors=10)\n",
    "knn.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9285714285714286"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "yknn_predict=knn.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10  0  1]\n",
      " [ 1  9  0]\n",
      " [ 3  0 18]]\n"
     ]
    }
   ],
   "source": [
    "conf_matrixKNN = confusion_matrix(y_test, yknn_predict)\n",
    "print(conf_matrixKNN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Kama</th>\n",
       "      <th>Rosa</th>\n",
       "      <th>Canadian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Kama</th>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rosa</th>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canadian</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Kama  Rosa  Canadian\n",
       "Kama        10     0         1\n",
       "Rosa         1     9         0\n",
       "Canadian     3     0        18"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ClassKNN= ['Kama','Rosa','Canadian']\n",
    "conf_matrix_dfKNN = pd.DataFrame(data=conf_matrixKNN, columns=ClassKNN, index=ClassKNN)\n",
    "conf_matrix_dfKNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(conf_matrix_dfKNN, annot=True, cmap=\"YlGnBu\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Metode Evaluasi Kebaikan</th>\n",
       "      <th>Nilai</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Akurasi</td>\n",
       "      <td>0.880952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Presisi</td>\n",
       "      <td>0.887218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Recall</td>\n",
       "      <td>0.888745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>F1 Score</td>\n",
       "      <td>0.882456</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Metode Evaluasi Kebaikan     Nilai\n",
       "0                  Akurasi  0.880952\n",
       "1                  Presisi  0.887218\n",
       "2                   Recall  0.888745\n",
       "3                 F1 Score  0.882456"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracyKnn=accuracy_score(y_test, yknn_predict)\n",
    "precisionKnn=precision_score(y_test, yknn_predict,average='macro')\n",
    "recallKnn=recall_score(y_test,yknn_predict,average='macro')\n",
    "f1scoreKnn=f1_score(y_test, yknn_predict,average='macro')\n",
    "\n",
    "metode = ['Akurasi','Presisi','Recall','F1 Score']\n",
    "nilai = [accuracyKnn,precisionKnn,recallKnn,f1scoreKnn]\n",
    "\n",
    "output = pd.DataFrame({'Metode Evaluasi Kebaikan':metode, 'Nilai':nilai})\n",
    "output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB(priors=None)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nb= GaussianNB()\n",
    "nb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9226190476190477"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nb.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "ynb_predict=nb.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10  0  1]\n",
      " [ 2  8  0]\n",
      " [ 2  0 19]]\n"
     ]
    }
   ],
   "source": [
    "conf_matrixnb = confusion_matrix(y_test, ynb_predict)\n",
    "print(conf_matrixnb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Kama</th>\n",
       "      <th>Rosa</th>\n",
       "      <th>Canadian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Kama</th>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rosa</th>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canadian</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Kama  Rosa  Canadian\n",
       "Kama        10     0         1\n",
       "Rosa         2     8         0\n",
       "Canadian     2     0        19"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Classnb= ['Kama','Rosa','Canadian']\n",
    "conf_matrix_dfnb = pd.DataFrame(data=conf_matrixnb, columns=Classnb, index=Classnb)\n",
    "conf_matrix_dfnb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(conf_matrix_dfnb, annot=True, cmap=\"YlGnBu\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8809523809523809\n",
      "0.8880952380952382\n",
      "0.8712842712842712\n",
      "0.8719060523938573\n"
     ]
    }
   ],
   "source": [
    "accuracyNB=accuracy_score(y_test, ynb_predict)\n",
    "precisionNB=precision_score(y_test, ynb_predict,average='macro')\n",
    "recallNB=recall_score(y_test,ynb_predict,average='macro')\n",
    "f1scoreNB=f1_score(y_test, ynb_predict,average='macro')\n",
    "print(accuracyNB)\n",
    "print(precisionNB)\n",
    "print(recallNB)\n",
    "print(f1scoreNB)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression Multiclass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegressionCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegressionCV(Cs=10, class_weight=None, cv=None, dual=False,\n",
       "           fit_intercept=True, intercept_scaling=1.0, max_iter=100,\n",
       "           multi_class='multinomial', n_jobs=1, penalty='l2',\n",
       "           random_state=123, refit=True, scoring=None, solver='lbfgs',\n",
       "           tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LR = LogisticRegressionCV(random_state=123,multi_class='multinomial')\n",
    "LR.fit (X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LR.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "yLR_predict = LR.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[11  0  0]\n",
      " [ 0  9  1]\n",
      " [ 2  0 19]]\n"
     ]
    }
   ],
   "source": [
    "conf_matrixLR = confusion_matrix(y_test, yLR_predict)\n",
    "print(conf_matrixLR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Kama</th>\n",
       "      <th>Rosa</th>\n",
       "      <th>Canadian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Kama</th>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rosa</th>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canadian</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Kama  Rosa  Canadian\n",
       "Kama        11     0         0\n",
       "Rosa         0     9         1\n",
       "Canadian     2     0        19"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ClassLR= ['Kama','Rosa','Canadian']\n",
    "conf_matrix_dfLR = pd.DataFrame(data=conf_matrixLR, columns=ClassLR, index=ClassLR)\n",
    "conf_matrix_dfLR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(conf_matrix_dfLR, annot=True, cmap=\"YlGnBu\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Metode Evaluasi Kebaikan</th>\n",
       "      <th>Nilai</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Akurasi</td>\n",
       "      <td>0.928571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Presisi</td>\n",
       "      <td>0.932051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Recall</td>\n",
       "      <td>0.934921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>F1 Score</td>\n",
       "      <td>0.930288</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Metode Evaluasi Kebaikan     Nilai\n",
       "0                  Akurasi  0.928571\n",
       "1                  Presisi  0.932051\n",
       "2                   Recall  0.934921\n",
       "3                 F1 Score  0.930288"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracyLR=accuracy_score(y_test, yLR_predict)\n",
    "precisionLR=precision_score(y_test, yLR_predict,average='macro')\n",
    "recallLR=recall_score(y_test,yLR_predict,average='macro')\n",
    "f1scoreLR=f1_score(y_test, yLR_predict,average='macro')\n",
    "\n",
    "metode = ['Akurasi','Presisi','Recall','F1 Score']\n",
    "nilai = [accuracyLR,precisionLR,recallLR,f1scoreLR]\n",
    "\n",
    "output = pd.DataFrame({'Metode Evaluasi Kebaikan':metode, 'Nilai':nilai})\n",
    "output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score, KFold\n",
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
       "            max_features=None, max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, presort=False, random_state=123,\n",
       "            splitter='best')"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DT = DecisionTreeClassifier(random_state=123)\n",
    "DT.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DT.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "yDT_predict = DT.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[11  0  0]\n",
      " [ 0 10  0]\n",
      " [ 2  0 19]]\n"
     ]
    }
   ],
   "source": [
    "conf_matrixDT = confusion_matrix(y_test, yDT_predict)\n",
    "print(conf_matrixDT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Kama</th>\n",
       "      <th>Rosa</th>\n",
       "      <th>Canadian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Kama</th>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rosa</th>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canadian</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Kama  Rosa  Canadian\n",
       "Kama        11     0         0\n",
       "Rosa         0    10         0\n",
       "Canadian     2     0        19"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ClassDT= ['Kama','Rosa','Canadian']\n",
    "conf_matrix_dfDT = pd.DataFrame(data=conf_matrixDT, columns=ClassDT, index=ClassDT)\n",
    "conf_matrix_dfDT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(conf_matrix_dfDT, annot=True, cmap=\"YlGnBu\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9523809523809523\n",
      "0.9487179487179488\n",
      "0.9682539682539683\n",
      "0.9555555555555556\n"
     ]
    }
   ],
   "source": [
    "accuracyDT=accuracy_score(y_test, yDT_predict)\n",
    "precisionDT=precision_score(y_test, yDT_predict,average='macro')\n",
    "recallDT=recall_score(y_test,yDT_predict,average='macro')\n",
    "f1scoreDT=f1_score(y_test, yDT_predict,average='macro')\n",
    "print(accuracyDT)\n",
    "print(precisionDT)\n",
    "print(recallDT)\n",
    "print(f1scoreDT)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gaussian Process Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.gaussian_process import GaussianProcessClassifier\n",
    "from sklearn.gaussian_process.kernels import RBF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianProcessClassifier(copy_X_train=True, kernel=None,\n",
       "             max_iter_predict=100, multi_class='one_vs_rest', n_jobs=1,\n",
       "             n_restarts_optimizer=0, optimizer='fmin_l_bfgs_b',\n",
       "             random_state=123, warm_start=False)"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "GPC = GaussianProcessClassifier(random_state=123)\n",
    "GPC.fit (X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9464285714285714"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "GPC.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "yGPC_predict = GPC.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10  0  1]\n",
      " [ 1  9  0]\n",
      " [ 2  0 19]]\n"
     ]
    }
   ],
   "source": [
    "conf_matrixGPC = confusion_matrix(y_test, yGPC_predict)\n",
    "print(conf_matrixGPC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Kama</th>\n",
       "      <th>Rosa</th>\n",
       "      <th>Canadian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Kama</th>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rosa</th>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canadian</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Kama  Rosa  Canadian\n",
       "Kama        10     0         1\n",
       "Rosa         1     9         0\n",
       "Canadian     2     0        19"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ClassGPC= ['Kama','Rosa','Canadian']\n",
    "conf_matrix_dfGPC = pd.DataFrame(data=conf_matrixGPC, columns=ClassGPC, index=ClassGPC)\n",
    "conf_matrix_dfGPC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(conf_matrix_dfGPC, annot=True, cmap=\"YlGnBu\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9047619047619048\n",
      "0.9064102564102564\n",
      "0.9046176046176045\n",
      "0.9025103408928826\n"
     ]
    }
   ],
   "source": [
    "accuracyGPC=accuracy_score(y_test, yGPC_predict)\n",
    "precisionGPC=precision_score(y_test, yGPC_predict,average='macro')\n",
    "recallGPC=recall_score(y_test,yGPC_predict,average='macro')\n",
    "f1scoreGPC=f1_score(y_test, yGPC_predict,average='macro')\n",
    "print(accuracyGPC)\n",
    "print(precisionGPC)\n",
    "print(recallGPC)\n",
    "print(f1scoreGPC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Support Vector Classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import LinearSVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,\n",
       "     intercept_scaling=1, loss='squared_hinge', max_iter=1000,\n",
       "     multi_class='ovr', penalty='l2', random_state=123, tol=0.0001,\n",
       "     verbose=0)"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SVC = LinearSVC(random_state=123)\n",
    "SVC.fit (X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9523809523809523"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SVC.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "ySVC_predict = SVC.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[11  0  0]\n",
      " [ 0 10  0]\n",
      " [ 2  0 19]]\n"
     ]
    }
   ],
   "source": [
    "conf_matrixSVC = confusion_matrix(y_test, ySVC_predict)\n",
    "print(conf_matrixSVC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Kama</th>\n",
       "      <th>Rosa</th>\n",
       "      <th>Canadian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Kama</th>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rosa</th>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canadian</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Kama  Rosa  Canadian\n",
       "Kama        11     0         0\n",
       "Rosa         0    10         0\n",
       "Canadian     2     0        19"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ClassSVC= ['Kama','Rosa','Canadian']\n",
    "conf_matrix_dfSVC = pd.DataFrame(data=conf_matrixSVC, columns=ClassSVC, index=ClassSVC)\n",
    "conf_matrix_dfSVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(conf_matrix_dfSVC, annot=True, cmap=\"YlGnBu\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9523809523809523\n",
      "0.9487179487179488\n",
      "0.9682539682539683\n",
      "0.9555555555555556\n"
     ]
    }
   ],
   "source": [
    "accuracySVC=accuracy_score(y_test, ySVC_predict)\n",
    "precisionSVC=precision_score(y_test, ySVC_predict,average='macro')\n",
    "recallSVC=recall_score(y_test,ySVC_predict,average='macro')\n",
    "f1scoreSVC=f1_score(y_test, ySVC_predict,average='macro')\n",
    "print(accuracySVC)\n",
    "print(precisionSVC)\n",
    "print(recallSVC)\n",
    "print(f1scoreSVC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ridge Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import RidgeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,\n",
       "        max_iter=None, normalize=False, random_state=123, solver='auto',\n",
       "        tol=0.001)"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr = RidgeClassifier(random_state=123)\n",
    "rr.fit (X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9642857142857143"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "yrr_predict = rr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[11  0  0]\n",
      " [ 0 10  0]\n",
      " [ 2  0 19]]\n"
     ]
    }
   ],
   "source": [
    "conf_matrixrr = confusion_matrix(y_test, yrr_predict)\n",
    "print(conf_matrixrr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Kama</th>\n",
       "      <th>Rosa</th>\n",
       "      <th>Canadian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Kama</th>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rosa</th>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canadian</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Kama  Rosa  Canadian\n",
       "Kama        11     0         0\n",
       "Rosa         0    10         0\n",
       "Canadian     2     0        19"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Classrr= ['Kama','Rosa','Canadian']\n",
    "conf_matrix_dfrr = pd.DataFrame(data=conf_matrixrr, columns=Classrr, index=Classrr)\n",
    "conf_matrix_dfrr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(conf_matrix_dfrr, annot=True, cmap=\"YlGnBu\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9523809523809523\n",
      "0.9487179487179488\n",
      "0.9682539682539683\n",
      "0.9555555555555556\n"
     ]
    }
   ],
   "source": [
    "accuracyrr=accuracy_score(y_test, yrr_predict)\n",
    "precisionrr=precision_score(y_test, yrr_predict,average='macro')\n",
    "recallrr=recall_score(y_test,yrr_predict,average='macro')\n",
    "f1scorerr=f1_score(y_test, yrr_predict,average='macro')\n",
    "print(accuracyrr)\n",
    "print(precisionrr)\n",
    "print(recallrr)\n",
    "print(f1scorerr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Perbandingan Setiap Metode Klasifikasi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Metode</th>\n",
       "      <th>Akurasi</th>\n",
       "      <th>Presisi</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1 score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>0.948718</td>\n",
       "      <td>0.968254</td>\n",
       "      <td>0.955556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Linear SVC</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>0.948718</td>\n",
       "      <td>0.968254</td>\n",
       "      <td>0.955556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Ridge Classifier</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>0.948718</td>\n",
       "      <td>0.968254</td>\n",
       "      <td>0.955556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Logistic Regression Multiclass</td>\n",
       "      <td>0.928571</td>\n",
       "      <td>0.932051</td>\n",
       "      <td>0.934921</td>\n",
       "      <td>0.930288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>0.906410</td>\n",
       "      <td>0.904618</td>\n",
       "      <td>0.902510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Gaussian Process Classifier</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>0.906410</td>\n",
       "      <td>0.904618</td>\n",
       "      <td>0.902510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Naive Bayes</td>\n",
       "      <td>0.880952</td>\n",
       "      <td>0.888095</td>\n",
       "      <td>0.871284</td>\n",
       "      <td>0.871906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>KNN Classifier</td>\n",
       "      <td>0.880952</td>\n",
       "      <td>0.887218</td>\n",
       "      <td>0.888745</td>\n",
       "      <td>0.882456</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Metode   Akurasi   Presisi    Recall  F1 score\n",
       "4                   Decision Tree  0.952381  0.948718  0.968254  0.955556\n",
       "6                      Linear SVC  0.952381  0.948718  0.968254  0.955556\n",
       "7                Ridge Classifier  0.952381  0.948718  0.968254  0.955556\n",
       "3  Logistic Regression Multiclass  0.928571  0.932051  0.934921  0.930288\n",
       "0                   Random Forest  0.904762  0.906410  0.904618  0.902510\n",
       "5     Gaussian Process Classifier  0.904762  0.906410  0.904618  0.902510\n",
       "2                     Naive Bayes  0.880952  0.888095  0.871284  0.871906\n",
       "1                  KNN Classifier  0.880952  0.887218  0.888745  0.882456"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Hold-Out Method\n",
    "metode = ('Random Forest','KNN Classifier','Naive Bayes','Logistic Regression Multiclass','Decision Tree','Gaussian Process Classifier', 'Linear SVC','Ridge Classifier')\n",
    "akurasi = (accuracyRF,accuracyKnn,accuracyNB,accuracyLR,accuracyDT,accuracyGPC,accuracySVC,accuracyrr)\n",
    "presisi = (precisionRF,precisionKnn,precisionNB,precisionLR,precisionDT,precisionGPC,precisionSVC,precisionrr)\n",
    "recall = (recallRF,recallKnn,recallNB,recallLR,recallDT,recallGPC,recallSVC,recallrr)\n",
    "f1score = (f1scoreRF,f1scoreKnn,f1scoreNB,f1scoreLR,f1scoreDT,f1scoreGPC,f1scoreSVC,f1scorerr)\n",
    "output_ho = pd.DataFrame({'Metode':metode, 'Akurasi':akurasi,'Presisi':presisi,'Recall':recall,'F1 score':f1score})\n",
    "output_ho.sort_values(['Akurasi','Presisi','Recall','F1 score'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Metode</th>\n",
       "      <th>Cross validation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Logistic Regression Multiclass</td>\n",
       "      <td>0.958824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Ridge Classifier</td>\n",
       "      <td>0.958456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Linear SVC</td>\n",
       "      <td>0.946691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.935294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Naive Bayes</td>\n",
       "      <td>0.911397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Gaussian Process Classifier</td>\n",
       "      <td>0.911029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.905147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>KNN Classifier</td>\n",
       "      <td>0.893382</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Metode  Cross validation\n",
       "3  Logistic Regression Multiclass          0.958824\n",
       "7                Ridge Classifier          0.958456\n",
       "6                      Linear SVC          0.946691\n",
       "0                   Random Forest          0.935294\n",
       "2                     Naive Bayes          0.911397\n",
       "5     Gaussian Process Classifier          0.911029\n",
       "4                   Decision Tree          0.905147\n",
       "1                  KNN Classifier          0.893382"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# cross-validation\n",
    "n=5 #jumlah fold\n",
    "skf=StratifiedKFold(n_splits=n, random_state=123)\n",
    "a = cross_val_score(RF, X_train, y_train, cv=skf).mean()\n",
    "b = cross_val_score(knn, X_train, y_train, cv=skf).mean()\n",
    "c = cross_val_score(nb, X_train, y_train, cv=skf).mean()\n",
    "d = cross_val_score(LR, X_train, y_train, cv=skf).mean()\n",
    "e = cross_val_score(DT, X_train, y_train, cv=skf).mean()\n",
    "f = cross_val_score(GPC, X_train, y_train, cv=skf).mean()\n",
    "g = cross_val_score(SVC, X_train, y_train, cv=skf).mean()\n",
    "h = cross_val_score(rr, X_train, y_train, cv=skf).mean()\n",
    "\n",
    "cv = (a,b,c,d,e,f,g,h)\n",
    "output_cv = pd.DataFrame({'Metode':metode, 'Cross validation':cv})\n",
    "output_cv.sort_values(['Cross validation'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Metode</th>\n",
       "      <th>Akurasi</th>\n",
       "      <th>Presisi</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1 score</th>\n",
       "      <th>Cross validation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Linear SVC</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>0.948718</td>\n",
       "      <td>0.968254</td>\n",
       "      <td>0.955556</td>\n",
       "      <td>0.970588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Ridge Classifier</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>0.948718</td>\n",
       "      <td>0.968254</td>\n",
       "      <td>0.955556</td>\n",
       "      <td>0.958456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>0.948718</td>\n",
       "      <td>0.968254</td>\n",
       "      <td>0.955556</td>\n",
       "      <td>0.905147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Logistic Regression Multiclass</td>\n",
       "      <td>0.928571</td>\n",
       "      <td>0.932051</td>\n",
       "      <td>0.934921</td>\n",
       "      <td>0.930288</td>\n",
       "      <td>0.958824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>0.906410</td>\n",
       "      <td>0.904618</td>\n",
       "      <td>0.902510</td>\n",
       "      <td>0.934926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Gaussian Process Classifier</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>0.906410</td>\n",
       "      <td>0.904618</td>\n",
       "      <td>0.902510</td>\n",
       "      <td>0.911029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Naive Bayes</td>\n",
       "      <td>0.880952</td>\n",
       "      <td>0.888095</td>\n",
       "      <td>0.871284</td>\n",
       "      <td>0.871906</td>\n",
       "      <td>0.911397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>KNN Classifier</td>\n",
       "      <td>0.880952</td>\n",
       "      <td>0.887218</td>\n",
       "      <td>0.888745</td>\n",
       "      <td>0.882456</td>\n",
       "      <td>0.893382</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Metode   Akurasi   Presisi    Recall  F1 score  \\\n",
       "6                      Linear SVC  0.952381  0.948718  0.968254  0.955556   \n",
       "7                Ridge Classifier  0.952381  0.948718  0.968254  0.955556   \n",
       "4                   Decision Tree  0.952381  0.948718  0.968254  0.955556   \n",
       "3  Logistic Regression Multiclass  0.928571  0.932051  0.934921  0.930288   \n",
       "0                   Random Forest  0.904762  0.906410  0.904618  0.902510   \n",
       "5     Gaussian Process Classifier  0.904762  0.906410  0.904618  0.902510   \n",
       "2                     Naive Bayes  0.880952  0.888095  0.871284  0.871906   \n",
       "1                  KNN Classifier  0.880952  0.887218  0.888745  0.882456   \n",
       "\n",
       "   Cross validation  \n",
       "6          0.970588  \n",
       "7          0.958456  \n",
       "4          0.905147  \n",
       "3          0.958824  \n",
       "0          0.934926  \n",
       "5          0.911029  \n",
       "2          0.911397  \n",
       "1          0.893382  "
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output = pd.DataFrame({'Metode':metode, 'Akurasi':akurasi,'Presisi':presisi,'Recall':recall,'F1 score':f1score,'Cross validation':cv})\n",
    "output.sort_values(['Akurasi','Cross validation'], ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Parameter Tuning "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SVC dengan Parameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "param = {\n",
    "    'C': [0.1,0.8,0.9,1,1.1,1.2,1.3,1.4]\n",
    "}\n",
    "gridsvc = GridSearchCV(SVC, param_grid=param, scoring='accuracy', cv=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise',\n",
       "       estimator=LinearSVC(C=1.1, class_weight=None, dual=True, fit_intercept=True,\n",
       "     intercept_scaling=1, loss='squared_hinge', max_iter=1000,\n",
       "     multi_class='ovr', penalty='l2', random_state=None, tol=0.0001,\n",
       "     verbose=0),\n",
       "       fit_params=None, iid=True, n_jobs=1,\n",
       "       param_grid={'C': [0.1, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring='accuracy', verbose=0)"
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gridsvc.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 1}"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gridsvc.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "nilai C yang didapat sudah sama dengan yang dicoba sebelumnya, maka tidak diperlukan pengujian lagi untuk Linear SVC. karena nilai akurasi yang dihasilkan sama dengan sebelumnya"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
